networks:
  hadoop:
    driver: bridge
  kafka:
    driver: bridge

services:
  # MongoDB
  mongodb:
    image: mongo:5.0  # 4.4
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"  # Port MongoDB
    networks:
      - kafka
    volumes:
      - mong_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro  # Automatyczne inicjalizowanie u≈ºytkownika
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
    healthcheck:
      test: ["CMD", "mongo", "--username", "admin", "--password", "admin123", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-init:
    build:
      context: .
      dockerfile: Dockerfile.mongo_init
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - kafka

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"  # Port Mongo Express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - kafka

  # ZooKeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - kafka

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    networks:
      - kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "scraped_data:1:1 prediction_data:1:1"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      timeout: 10s
      retries: 10

  # SPEED LAYER
  speed_layer:
    build:
      context: .
      dockerfile: Dockerfile.speed_layer
    networks:
      - kafka
    depends_on:
      - kafka
      - zookeeper

  # SCRAPERS
  scraper_news_xtb:
    build:
      context: .
      dockerfile: Dockerfile.scraper_news_xtb
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - kafka

  scraper_newsapi:
    build:
      context: .
      dockerfile: Dockerfile.scraper_newsapi
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - kafka

  scraper_worldnewsapi:
    build:
      context: .
      dockerfile: Dockerfile.scraper_worldnewsapi
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - kafka

  scraper_stock:
    build:
      context: .
      dockerfile: Dockerfile.scraper_stock_xtb
    depends_on:
      - kafka
      - zookeeper
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - kafka
    
  scraper_weather_openmeteo:
    build:
      context: .
      dockerfile: Dockerfile.scraper_weather_openmeteo
    depends_on:
      - kafka
      - zookeeper
      - mongodb
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - kafka

  # CONSUMERS
  consumer_batch:
    build:
      context: .
      dockerfile: Dockerfile.consumer_batch
    depends_on:
      kafka:
        condition: service_started
      zookeeper:
        condition: service_started
      namenode:
        condition: service_healthy
      datanode:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - hadoop
      - kafka
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://namenode:50070 || exit 1 && nc -z kafka 9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # HDFS - NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    container_name: namenode
    environment:
      CLUSTER_NAME: hadoop_cluster
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HDFS_CONF_dfs_webhdfs_enabled: "true"
    volumes:
      - namenode_data:/hadoop/dfs/name
    ports:
      - "9870:9870"  # Web UI port
      - "50070:50070"  # Mapowanie portu Web UI
      - "9000:9000"  # Namenode communication port
    networks:
      - hadoop
    healthcheck:
      test: ["CMD", "curl", "-f", "http://namenode:50070"]
      interval: 30s
      timeout: 10s
      retries: 5

  # HDFS - DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    container_name: datanode
    environment:
      CLUSTER_NAME: hadoop_cluster
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HDFS_CONF_dfs_namenode_rpc-address: namenode:9000
    volumes:
      - datanode_data:/hadoop/dfs/data
    ports:
      - "9864:9864"  # Web UI port
    networks:
      - hadoop
    depends_on:
      - namenode

  model_api:
    build:
      context: .
      dockerfile: Dockerfile.model_api
    ports:
      - "8000:8000"
    networks:
      - hadoop
      - kafka
    depends_on:
      - namenode
      - datanode

volumes:
  namenode_data:
  datanode_data:
  mong_data:
